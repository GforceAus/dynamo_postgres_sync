# generated by datamodel-codegen:
#   filename:  GforceTasks-notow4pikzczbpjg42gytvbuci-production.json
#   timestamp: 2025-09-26T04:19:18+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field


class DocumentAddItem(BaseModel):
    requiredDoc: bool
    document: str
    notes: str
    uploaded: Optional[bool] = None
    signed: Optional[bool] = None
    localUri: Optional[str] = None
    mimeType: Optional[str] = None
    key: Optional[str] = None


class CountryItem(BaseModel):
    value: str
    label: str


class StateItem(BaseModel):
    value: str
    label: str


class StoreListItem(BaseModel):
    store_id: str
    store_name: str


class CallCycleItem(BaseModel):
    call_cycle_freq: str
    storeList: List[StoreListItem]
    call_cycle_name: str
    call_status: str
    retailer: str
    call_id: str


class TaskPhoto(BaseModel):
    task_id: Optional[str] = None
    client_photos_shareable: str
    photo_name: str
    task_photos_notes: str


class Stores(BaseModel):
    store_id: str
    store_name: str
    checked: bool
    state: str
    label: str
    value: str


class Question(BaseModel):
    question: str
    client_shareable: Optional[str] = None
    Answers: List[str]
    additionShareable: Optional[str] = None
    question_shareable: Optional[bool] = None
    answer_from_rep: Optional[str] = None


class RepImagesCannotCompleteItem(BaseModel):
    bucket: str
    localUri: str
    mimeType: str
    region: str
    key: str
    isUploaded: Optional[str] = None


class TaskComment(BaseModel):
    task_id: Optional[str] = None
    comment: str
    task_comments_notes: str
    client_comments_shareable: str


class RepImage(BaseModel):
    bucket: str
    localUri: str
    mimeType: str
    region: str
    key: str
    isUploaded: Optional[str] = None


class ModelItem(BaseModel):
    documentAdd: List[DocumentAddItem]
    cover_rep_first_name: str
    support_rep_last_name: str
    endDate: str
    cannot_complete_photos: List
    retailer_name: str
    cannot_complete_reason: str
    country: List[CountryItem]
    state: List[StateItem]
    logo_img: str
    cover_rep_last_name: str
    docs_from_rep: List
    startDate: str
    SK: str
    supplier_name: str
    taskDate: str
    field__typename: str = Field(..., alias='__typename')
    callCycle: List[CallCycleItem]
    field_lastChangedAt: float = Field(..., alias='_lastChangedAt')
    pause_task_reason: str
    store_id: str
    task_photos: List[TaskPhoto]
    time_spent: str
    task_name: str
    comments_from_rep: Optional[str] = None
    support_rep_first_name: str
    task_description: str
    delegated: bool
    week_number: str
    cover_rep_type: str
    task_id: str
    senior_rep_first_name: str
    recurring: bool
    full_company_name: str
    PK: str
    photos_from_rep: List[str]
    store_name: str
    support_rep_username: str
    task_type: str
    created_date: str
    week_startDate: str
    supplier_id: str
    stores: Stores
    field_version: float = Field(..., alias='_version')
    task_priority: str
    feedback_reassign: str
    task_approval: str
    id: str
    taskDateISO8601: str
    cannot_complete_comments: str
    senior_rep_username: str
    cannot_complete_documents: List
    action: Union[bool, str]
    questions: List[Question]
    record_time: str
    rep_images_cannot_complete: Optional[List[RepImagesCannotCompleteItem]] = None
    fine_line: str
    oneOff: bool
    rep_documents: List
    task_approval_notes: str
    visit_freq: str
    cover_rep_username: str
    task_status: str
    task_comments: List[TaskComment]
    updatedAt: str
    recurringValue: str
    senior_rep_last_name: str
    push_task_comments: str
    rep_images: List[RepImage]
    solved: Optional[bool] = None
    delegated_to_sup_rep: Optional[str] = None
    delegated_comments: Optional[str] = None


class Model(BaseModel):
    __root__: List[ModelItem]
